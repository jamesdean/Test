$(function() {	
	
	var update_timer;
	
	$('.data_text').keypress(function() {
		clearInterval(update_timer);	
	});
	
	$('.submit_button').click(function(){
		update_timer = setInterval(function(){
		<%= @sync=Sync.find(:last)%>
	  	$('.data_text').val('<%= @sync.data %>'); 
		},2000);		
	});
} )


def index

    #@sync = Sync.find(:last)
    
    @sync = Sync.new(params[:sync]) unless @sync
    
    @sync.save
    
    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @sync }
      format.js  {render :content_type => 'text/javascript'}
    end
    
  end

  def update
    
    @sync = Sync.find(params[:id])
    @sync.update_attributes(params[:sync])     
    
    respond_to do |format| 
      
      if @sync.update_attributes(params[:sync])        
        format.html
        format.json { render json: @sync }      
        format.js  {render :content_type => 'text/javascript'}

      else
        format.html { render action: "can't save" }
        format.json { render json: @sync.errors, status: :unprocessable_entity }
   
      end
    end
    
  end

  def stretch
    
  end

$('.input_form').submit(function() {
	
	var valuesToSubmit = $(this).serialize();
    $.ajax({
        url: $(this).attr('action'), 
        data: valuesToSubmit,
        dataType: "JSON"
    }).success(function(json){        
        ;
    });
    return false;
});


$(function() {
    alert(1);    
    respond_to do |format|
      if @sync.save
        #format.html { redirect_to syncs_url, notice: 'Sync was successfully created.' } #changed
        format.json { render json: @sync, status: :created, location: @sync }
        format.js  {render :content_type => 'text/javascript'}
      else
        #format.html { render action: 'index' } #changed
        format.json { render json: @sync.errors, status: :unprocessable_entity }
      end
    end
    $('form[data-update-target]').live('ajax:success', function(evt, data) {
        var target = $(this).data('update-target');
        $('#' + target).html(data);       
    });
});


    
    respond_to do |format|
      if @sync.save
        #format.html { redirect_to syncs_url, notice: 'Sync was successfully created.' } #changed
        format.json { render json: @sync, status: :created, location: @sync }
        format.js  {render :content_type => 'text/javascript'}
      else
        #format.html { render action: 'index' } #changed
        format.json { render json: @sync.errors, status: :unprocessable_entity }
      end
    end
    


		
		var valuesToSubmit = $(this).serialize();
	    $.ajax({
	        url: '<%= url_for :action => 'update' %>', 
	        data: valuesToSubmit,
	        dataType: "JSON",
	        type: "PUT"
	    }).success(function(json){   
	    	//data = json.data
	        //$('.data_text').val(data);
	    });
	    once = true;
	    return false;
	    


	
	var once = false;
	 
	$('.input_form').submit( function() {
		once = true;
	});	
	
	readlastRecord = function(){
		alert(1);		
		if ( once ){
			<%= @sync =Sync.find(:last) %>
			alert('<%= @sync.data%>');
			$('.data_text').val('<%= @sync.data%>');					
			once = false;
		}		
	}; 
	setInterval("readlastRecord()", 1000);
	

---------------------------------------------
	
$(function() {	
	var once = false;
	var update_timer;
	
	$('.input_form').submit(function(){
			update_timer = setInterval(function() {		
						if (once) {		
							<%= @sync = Sync.find(:last) %>				
							//$('.data_text').val('<%= @sync.data %>');						
						}							
					}, 1000);
	});							
	
	$('.data_text').keypress(function() {
		clearInterval(update_timer);	
	});
} )
-----------------------------------------------
<%= render :partial => 'form', :locals => { :sync=> @sync } %>